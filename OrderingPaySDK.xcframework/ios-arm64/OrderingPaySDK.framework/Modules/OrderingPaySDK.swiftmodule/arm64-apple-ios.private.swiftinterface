// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name OrderingPaySDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Alamofire
import AnimatedCollectionViewLayout
import AudioToolbox
import CBPinEntryView
import Combine/*.Combine*/
import CoreData
import CoreGraphics
import CoreLocation
import FawryFramework
import Foundation
import ImageIO
import Kingfisher
import Lottie
import MessageUI
import NaturalLanguage
@_exported import OrderingPaySDK
import Promises
import QuartzCore
import SDWebImage
import SafariServices
import Sentry
import Swift
import SwiftMessages
import SwiftUI
import SystemConfiguration
import UIKit.UIImage
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
public struct ErrorModel : Swift.Codable {
  public var description: Swift.String?
  public var reason: Swift.String?
  public var statusCode: Swift.String?
  public var type: Swift.String?
  public var code: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static let modelName: Swift.String
}
@objc @_inheritsConvenienceInitializers public class VerifyCustomerManager : ObjectiveC.NSObject {
  public class var shared: OrderingPaySDK.VerifyCustomerManager? {
    get
  }
  public func fawryVerifyCustomerLuncher(verifyCustomerRequest: OrderingPaySDK.VerifyCustomerRequest, onVerificationCompletionBlock: OrderingPaySDK.CallBacks<OrderingPaySDK.CustomerData>)
  public func fawryResendOtpLuncher(requestOTPRequest: OrderingPaySDK.RequestOTPRequest, resendCompletionBlock: OrderingPaySDK.CallBacks<Swift.Bool>?)
  @objc public func clearSDK()
  @objc override dynamic public init()
  @objc deinit
}
public func print<T>(file: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line, message: T, color: UIKit.UIColor = .white)
public struct CheckoutRequestData {
  public init(customerData: OrderingPaySDK.CustomerLaunchData, merchantData: OrderingPaySDK.MerchantLaunchData, branchCode: Swift.String, serviceTypeCode: Swift.String, showVoucherContainer: Swift.Bool, showLoyaltyContainer: Swift.Bool, showTipsView: Swift.Bool, skipReceipt: Swift.Bool, enable3Ds: Swift.Bool, apiPath: Swift.String?, tableId: Swift.Int?, branchName: Swift.String?, addressMode: FawryFramework.AddressMode, shippingAddress: FawryFramework.AddressList?, scheduledTime: Foundation.Date?, beId: Swift.String?)
}
public struct CustomerLaunchData {
  public init(customerName: Swift.String?, customerEmail: Swift.String?, customerMobile: Swift.String?, customerProfileId: Swift.String?, password: Swift.String?, token: Swift.String, customerCif: Swift.String?)
}
public struct MerchantLaunchData {
  public init(submerchantCode: Swift.String?, merchantCode: Swift.String?, merchantRefNum: Swift.String?)
}
public struct GiftObject : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class AuthManager {
  public func authManagerLauncher(registrationCallBacks: OrderingPaySDK.CallBacks<Swift.Bool>?, loginCallBacks: OrderingPaySDK.CallBacks<OrderingPaySDK.CustomerData>?, logoutCallBacks: OrderingPaySDK.CallBacks<Swift.Int>?, forgetPasswordCallBacks: OrderingPaySDK.CallBacks<Swift.Int>?, createNewPasswordCallBacks: OrderingPaySDK.CallBacks<Swift.Int>?, deleteAccountCallBacks: OrderingPaySDK.CallBacks<Swift.Int>?, verificationCallBacks: OrderingPaySDK.CallBacks<OrderingPaySDK.CustomerData>?, resendVerificationCallBacks: OrderingPaySDK.CallBacks<Swift.Int>?, changePasswordCallBacks: OrderingPaySDK.CallBacks<Swift.Int>?)
  public func fawryRegisteration(registerDataRequest: OrderingPaySDK.RegisterDataRequest?)
  public func fawryLogin(loginDataRequest: OrderingPaySDK.LoginDataRequest?)
  public func fawryLogout(customerData: OrderingPaySDK.CustomerData)
  public func fawryForgetPassword(forgetPassordRequest: OrderingPaySDK.ForgetPasswordRequest)
  public func fawryCreateNewPassword(newPasswordRequet: OrderingPaySDK.CreateNewPasswordRequest)
  public func fawryDeleteAccount(customerdata: OrderingPaySDK.CustomerData)
  public func fawryVerifyCustomer(verifyCustomerRequest: OrderingPaySDK.VerifyCustomerRequest)
  public func fawryResendOtp(requestOTPRequest: OrderingPaySDK.RequestOTPRequest)
  public func fawryChangePassword(requestChangePassword: OrderingPaySDK.ChangePasswordRequest)
  @objc deinit
}
public struct UserInfoEntity {
}
@objc public class LaunchModel : ObjectiveC.NSObject {
  public init(baseURL: Swift.String? = nil, SDKBaseURL: Swift.String? = nil, baseMediaURL: Swift.String? = nil, privacyPolicyUrl: Swift.String? = nil, merchantNumber: Swift.String? = nil, secureKey: Swift.String? = nil, addressHierarchyOption: Swift.String? = nil, closeAfterPurshase: Swift.Bool? = nil, language: OrderingPaySDK.LanguageEnum? = nil)
  @objc deinit
}
extension UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func sendAction(_ action: ObjectiveC.Selector, to target: Any?, for event: UIKit.UIEvent?)
}
extension UIKit.UICollectionReusableView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
}
@_inheritsConvenienceInitializers @objc public class NFXHTTPModel : ObjectiveC.NSObject {
  @objc public var requestURL: Swift.String?
  @objc public var requestURLComponents: Foundation.URLComponents?
  @objc public var requestURLQueryItems: [Foundation.URLQueryItem]?
  @objc public var requestMethod: Swift.String?
  @objc public var requestCachePolicy: Swift.String?
  @objc public var requestDate: Foundation.Date?
  @objc public var requestTime: Swift.String?
  @objc public var requestTimeout: Swift.String?
  @objc public var requestHeaders: [Swift.AnyHashable : Any]?
  public var requestBodyLength: Swift.Int?
  @objc public var requestType: Swift.String?
  @objc public var requestCurl: Swift.String?
  public var responseStatus: Swift.Int?
  @objc public var responseType: Swift.String?
  @objc public var responseDate: Foundation.Date?
  @objc public var responseTime: Swift.String?
  @objc public var responseHeaders: [Swift.AnyHashable : Any]?
  public var responseBodyLength: Swift.Int?
  public var timeInterval: Swift.Float?
  @objc public var randomHash: Swift.String {
    @objc get
    @objc set
  }
  public var shortType: OrderingPaySDK.HTTPModelShortType
  @objc public var shortTypeString: Swift.String {
    @objc get
  }
  @objc public var noResponse: Swift.Bool
  @objc public func getRequestBody() -> Swift.String
  @objc public func getResponseBody() -> Swift.String
  @objc public func getRequestBodyFileURL() -> Foundation.URL
  @objc public func getRequestBodyFilename() -> Swift.String
  @objc public func getResponseBodyFileURL() -> Foundation.URL
  @objc public func getResponseBodyFilename() -> Swift.String
  @objc public func saveData(_ dataString: Swift.String, to fileURL: Foundation.URL)
  @objc public func readRawData(from fileURL: Foundation.URL) -> Foundation.Data?
  @objc public func getTimeFromDate(_ date: Foundation.Date) -> Swift.String?
  public func prettyPrint(_ rawData: Foundation.Data, type: OrderingPaySDK.HTTPModelShortType) -> Swift.String?
  @objc public func isSuccessful() -> Swift.Bool
  @objc public func formattedRequestLogEntry() -> Swift.String
  @objc public func formattedResponseLogEntry() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
public struct AllProductsRequestData : Swift.Codable {
  public init(category: OrderingPaySDK.CategoryEntity?, publishType: Swift.String?, starredItem: Swift.Int?, searProductName: Swift.String?, sortBy: Swift.String?, brandCode: Swift.String?, fromPrice: Swift.Int?, toPrice: Swift.Int?, tage: Swift.String?, excludeSameCategory: Swift.Bool?, page: Swift.Int?, size: Swift.Int?, merchantAccountNumber: Swift.String, branchCategory: Swift.String?, serviceTypeCode: Swift.String?, branchCode: Swift.String?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class OrderingPaySDKManager : ObjectiveC.NSObject {
  public var ordersManager: OrderingPaySDK.OrdersManager?
  public var categoriesManager: OrderingPaySDK.CategoriesManager?
  public var merchantsListManager: OrderingPaySDK.MerchantsListManger?
  public var branchesManager: OrderingPaySDK.BranchesManager?
  public var chooseServiceManager: OrderingPaySDK.ChooseServiceManager?
  public var cartManager: OrderingPaySDK.CartManager?
  public var checkoutManager: OrderingPaySDK.CheckoutManager?
  public var authManager: OrderingPaySDK.AuthManager?
  public var addressesManager: OrderingPaySDK.AddressesManager?
  public var loyaltyManager: OrderingPaySDK.UserLoyaltyManager?
  public var cardsManager: OrderingPaySDK.CardsManager?
  public var governratesManager: OrderingPaySDK.GovernratesManager?
  public class var shared: OrderingPaySDK.OrderingPaySDKManager? {
    get
  }
  public typealias OnStartHandler = () -> Swift.Void
  public typealias OnErrorHandler = (OrderingPaySDK.OrderingPaySDKError?) -> Swift.Void
  public typealias OnSuccessHandler = (FawryFramework.PaymentChargeResponse) -> Swift.Void
  public typealias OnLoginSuccessHandler = (OrderingPaySDK.CustomerData?) -> Swift.Void
  public typealias OnLoginStartHandler = (OrderingPaySDK.OrderingPaySDKError?) -> Swift.Void
  public typealias OnOrdersCompeleteHandler = ([OrderingPaySDK.CustomerOrdersAPIResponse]?) -> Swift.Void
  public typealias OnOrdersStartHandler = (OrderingPaySDK.OrderingPaySDKError?) -> Swift.Void
  public typealias OnOrdersRatingComplete = (Swift.String?) -> Swift.Void
  public func launchOrderingPaySDK(on parentViewController: UIKit.UIViewController, launchModel: OrderingPaySDK.LaunchModel, onStartBlock: @escaping OrderingPaySDK.OrderingPaySDKManager.OnStartHandler, onSuccessBlock: @escaping OrderingPaySDK.OrderingPaySDKManager.OnSuccessHandler, errorBlock: @escaping OrderingPaySDK.OrderingPaySDKManager.OnErrorHandler)
  public func setupConfig(launchModel: OrderingPaySDK.LaunchModel)
  public func clearSDK()
  public func loginManager(with request: OrderingPaySDK.LoginDataRequest) -> OrderingPaySDK.LoginManager?
  public func registerManager(with request: OrderingPaySDK.RegisterDataRequest) -> OrderingPaySDK.RegisterManager?
  public func deleteAccountManager() -> OrderingPaySDK.DeleteAccountManager?
  public func logoutManager() -> OrderingPaySDK.LogoutManager?
  public func forgetPasswordManager() -> OrderingPaySDK.ForgetPasswordManager?
  public func getMerchantReferenceNumber() -> Swift.String
  public func verifyCustomerManager() -> OrderingPaySDK.VerifyCustomerManager?
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AddressesManager {
  public func addressesManagerLauncher(getAddressesCallBacks: OrderingPaySDK.CallBacks<[FawryFramework.AddressList]>?, deleteAddressCallBacks: OrderingPaySDK.CallBacks<[Swift.String : Any]>?, editAddressCallBacks: OrderingPaySDK.CallBacks<FawryFramework.AddressList>?, addAddressCallBacks: OrderingPaySDK.CallBacks<FawryFramework.AddressList>?, findCouriersPerAddressCallBacks: OrderingPaySDK.CallBacks<[FawryFramework.Courier]>?)
  public func getUserAddresses(customerData: OrderingPaySDK.CustomerData)
  public func deleteAddress(of address: OrderingPaySDK.AddressModel, customerData: OrderingPaySDK.CustomerData)
  public func editAddress(of address: OrderingPaySDK.AddressModel, customerData: OrderingPaySDK.CustomerData)
  public func addAddress(address: OrderingPaySDK.AddressModel, customerData: OrderingPaySDK.CustomerData)
  public func findCouriersPerAddress(findCourierModel: OrderingPaySDK.FindCourierModel)
  @objc deinit
}
public enum FawrySDKStatusCode : Swift.Int {
  case success
  case userDidCancel
  case sdkNotIntitalized
  case paramterMissing
  case contollerNotFound
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct MerchantItemDataModel : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Tier : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TaxDataModel : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Status : Swift.String, Swift.Codable {
  case active
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VerifyCustomerRequest {
  public let activationCode: Swift.String
  public let mobileNumber: Swift.String
  public init(activationCode: Swift.String, mobileNumber: Swift.String)
}
@_hasMissingDesignatedInitializers public class GovernratesManager {
  public func governratesManagerLauncher(getGovernratesCallBacks: OrderingPaySDK.CallBacks<[FawryFramework.Governorate]>, retriveShippingGovernoratesCallBacks: OrderingPaySDK.CallBacks<[FawryFramework.Governorate]>)
  public func getGovernrates(customerData: OrderingPaySDK.CustomerData)
  public func retriveShippingGovernorates(customerData: OrderingPaySDK.CustomerData)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class CustomRadioButton : UIKit.UIButton {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var outerCircleColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var innerCircleCircleColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var outerCircleLineWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var innerCircleGap: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @objc deinit
}
public struct SearchRequestData : Swift.Codable {
  public init(page: Swift.Int, size: Swift.Int, searchKey: Swift.String, merchantAccountNumber: Swift.String, publishType: Swift.String, branchCode: Swift.String, branchCategory: Swift.String, ServiceTypeCode: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class OrdersManager : ObjectiveC.NSObject {
  public func fawryOrdersLuncher(getOrdersCallBacks: OrderingPaySDK.CallBacks<[OrderingPaySDK.CustomerOrdersAPIResponse]>, rateOrderCallBacks: OrderingPaySDK.CallBacks<Swift.Int>, getOrderSummaryCallBacks: OrderingPaySDK.CallBacks<[OrderingPaySDK.CustomerOrdersAPIResponse]>)
  public func getMyOrdersWith(requestData: OrderingPaySDK.OrdersRequestData)
  public func getOrderSummary(referenceNumber: Swift.String, token: Swift.String)
  public func rateOrderWith(requestData: OrderingPaySDK.RateOrderRequestData)
  @objc override dynamic public init()
  @objc deinit
}
public struct FawryConfigLaunchModel {
  public let customerName: Swift.String
  public let customerEmail: Swift.String
  public let customerMobile: Swift.String
  public let customerProfileId: Swift.String
  public let password: Swift.String?
  public let token: Swift.String
  public let customerCif: Swift.String?
  public init(customerName: Swift.String, customerEmail: Swift.String, customerMobile: Swift.String, customerProfileId: Swift.String, password: Swift.String?, token: Swift.String, customerCif: Swift.String?)
}
extension UIKit.UIWindow {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func motionEnded(_ motion: UIKit.UIEvent.EventSubtype, with event: UIKit.UIEvent?)
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public class func getNFXDeviceType() -> Swift.String
  @_Concurrency.MainActor(unsafe) public class func parseDeviceType(_ identifier: Swift.String) -> Swift.String
}
public enum APIOrderStatus : Swift.String, Swift.Codable {
  case scheduled
  case orderPlaced
  case inProgress
  case sucess
  case success
  case failed
  case canceled
  case cancelled
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias OffersResponse = [OrderingPaySDK.OfferEntity]
public struct OfferEntity : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AllOffersResponse : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class ContainedProductsEntity : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public enum GiftEntityType : Swift.String, Swift.Codable {
  case freeGift
  case discount
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum GiftEntityDiscountType : Swift.String, Swift.Codable {
  case fixed
  case percentage
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct GiftEntity : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum OfferCampaignType : Swift.String, Swift.Codable {
  case transactionDiscount
  case bundleOffer
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class UserLoyaltyManager {
  public func userLoyaltyManagerLauncher(fetchUserPointsHistoryCallBacks: OrderingPaySDK.CallBacks<Any>?, fetchCustomerVouchersHistoryCallBacks: OrderingPaySDK.CallBacks<Any>?, fetchProgramVouchersCallBacks: OrderingPaySDK.CallBacks<[FawryFramework.ProgramVouchersModel]>?, createVoucherCallBacks: OrderingPaySDK.CallBacks<Any>?, verifyVoucherCallBacks: OrderingPaySDK.CallBacks<Any>?, fetchCustomerInfoCallBacks: OrderingPaySDK.CallBacks<FawryFramework.CustomerLoyaltyInfo>?)
  public func fetchUserPointsHistory(customerData: OrderingPaySDK.CustomerData)
  public func fetchCustomerVouchersHistory(customerData: OrderingPaySDK.CustomerData, page: Swift.Int)
  public func fetchProgramVouchers(customerData: OrderingPaySDK.CustomerData)
  public func createVoucher(customerData: OrderingPaySDK.CustomerData, programVouchersModel: FawryFramework.ProgramVouchersModel, walletAccounts: FawryFramework.WalletAccounts)
  public func verifyVoucher(customerData: OrderingPaySDK.CustomerData, code: Swift.String, partnerId: Swift.String, amount: Swift.Double)
  public func fetchCustomerInfo(customerData: OrderingPaySDK.CustomerData)
  @objc deinit
}
public struct GetBranchesAPIResponse : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public protocol DeleteAccountValidatorType {
  func isValidMobileNumber(mobile: Swift.String) -> Swift.Bool
}
public class DeleteAccountValidator : OrderingPaySDK.DeleteAccountValidatorType {
  public init()
  public func isValidMobileNumber(mobile: Swift.String) -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ChooseServiceManager : ObjectiveC.NSObject {
  public func chooseServiceManagerLauncher(onChooseServiceCompleteBlock: OrderingPaySDK.CallBacks<OrderingPaySDK.ServicesList>)
  public func getChooseServiceStep1(busnissEntityID: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BranchesManager {
  public func branchesManagerLauncher(onBranchesCompleteBlock: OrderingPaySDK.CallBacks<[OrderingPaySDK.GetBranchesAPIResponse]>, onBranchUpdatesCompleteBlock: OrderingPaySDK.CallBacks<OrderingPaySDK.GetBranchesAPIResponse>, onBranchByQRCodeCompleteBlock: OrderingPaySDK.CallBacks<OrderingPaySDK.GetBranchesAPIResponse>)
  public func getBranchesStep1(region: Swift.String, area: Swift.String, districts: Swift.String, lat: Swift.String, long: Swift.String, serviceTypeCode: Swift.String, businessEntityId: Swift.String, activeShift: Swift.String, maximumDistance: Swift.String, coverageArea: Swift.String)
  public func getBranchesByAreaForPickUpStep2(area: Swift.String, businessEntityId: Swift.String, activeShift: Swift.String, maximumDistance: Swift.String)
  public func getBranchesByLocationStep3(lat: Swift.String, long: Swift.String, serviceTypeCode: Swift.String, businessEntityId: Swift.String, activeShift: Swift.String, maximumDistance: Swift.String, coverageArea: Swift.String)
  public func getBranchUpdatesStep4(code: Swift.String)
  public func getBranchByQRCodeStep5(qrCode: Swift.String)
  @objc deinit
}
extension Swift.String {
  public func localized(with arguments: [any Swift.CVarArg]) -> Swift.String
}
public struct AddressBodyModel : Swift.Encodable {
  public let governorate: Swift.String
  public let city: Swift.String
  public let area: Swift.String
  public let street: Swift.String
  public let address: Swift.String
  public var receiverName: Swift.String
  public let addressType: OrderingPaySDK.AddressType
  public init(governorate: Swift.String, city: Swift.String, area: Swift.String, street: Swift.String, address: Swift.String, receiverName: Swift.String, addressType: OrderingPaySDK.AddressType)
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct AddressType : Swift.Encodable {
  public let code: Swift.String
  public init(code: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct ForgetPasswordRequest {
  public let language: OrderingPaySDK.LanguageEnum
  public let mobileNumber: Swift.String
  public init(language: OrderingPaySDK.LanguageEnum, mobileNumber: Swift.String)
}
extension OrderingPaySDK.Resolver : OrderingPaySDK.ResolverRegistering {
  public static func registerAllServices()
}
public struct RelatedProductsRequestData {
  public init(accountNumber: Swift.String, page: Swift.Int? = nil, size: Swift.Int? = nil, tag: [Swift.String], branchCode: Swift.String? = nil, branchCategory: Swift.Int? = nil, serviceTypeCode: Swift.String? = nil, itemCategoryCode: Swift.String? = nil, excludeSameCategory: Swift.Bool? = nil)
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class CheckBox : UIKit.UIControl {
  public enum Style {
    case square
    case circle
    case cross
    case tick
    public static func == (a: OrderingPaySDK.CheckBox.Style, b: OrderingPaySDK.CheckBox.Style) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum BorderStyle {
    case square
    case roundedSquare(radius: CoreFoundation.CGFloat)
    case rounded
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func point(inside point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class NFXProtocol : Foundation.URLProtocol {
  @objc override dynamic open class func canInit(with request: Foundation.URLRequest) -> Swift.Bool
  @objc override dynamic open class func canInit(with task: Foundation.URLSessionTask) -> Swift.Bool
  @objc override dynamic open func startLoading()
  @objc override dynamic open func stopLoading()
  @objc override dynamic open class func canonicalRequest(for request: Foundation.URLRequest) -> Foundation.URLRequest
  @objc override dynamic public init(request: Foundation.URLRequest, cachedResponse: Foundation.CachedURLResponse?, client: (any Foundation.URLProtocolClient)?)
  @objc deinit
}
extension OrderingPaySDK.NFXProtocol : Foundation.URLSessionDataDelegate {
  @objc dynamic public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc dynamic public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse, completionHandler: @escaping (Foundation.URLSession.ResponseDisposition) -> Swift.Void)
  @objc dynamic public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: (any Swift.Error)?)
  @objc dynamic public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest, completionHandler: @escaping (Foundation.URLRequest?) -> Swift.Void)
  @objc dynamic public func urlSession(_ session: Foundation.URLSession, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc dynamic public func urlSessionDidFinishEvents(forBackgroundURLSession session: Foundation.URLSession)
}
public struct ProductsAdonsRequestData : Swift.Codable {
  public init(productCode: Swift.String, branchCode: Swift.String, branchCategory: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NetworkError : Swift.Error {
  case noInternet
  case networkError(message: Swift.String)
  case error(_: Any)
  case errorModel(errorModel: OrderingPaySDK.ErrorModel)
  case tokenExpired
}
public struct ErrorMessages {
}
public struct CartProductEntity : Swift.Codable {
  public init()
  public init(type: OrderingPaySDK.CartProductEntityType, product: OrderingPaySDK.Product, variant: OrderingPaySDK.Variant?)
  public init(type: OrderingPaySDK.CartProductEntityType, bundle: OrderingPaySDK.OfferEntity)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct OrderingProduct : Swift.Codable {
  public init(product: OrderingPaySDK.Product, count: Swift.Int? = 0, selectedVariant: OrderingPaySDK.Variant? = Variant(), selectedAddons: [OrderingPaySDK.AddOnsModel]? = [], specialNote: Swift.String? = "", selectedCustomAddOnsOption: [OrderingPaySDK.AddOnsModel]? = [], availability: OrderingPaySDK.CartItemAvailability? = .none)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum HTTPModelShortType : Swift.String, Swift.CaseIterable {
  case JSON
  case XML
  case HTML
  case IMAGE
  case OTHER
  public init?(rawValue: Swift.String)
  public typealias AllCases = [OrderingPaySDK.HTTPModelShortType]
  public typealias RawValue = Swift.String
  public static var allCases: [OrderingPaySDK.HTTPModelShortType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension OrderingPaySDK.HTTPModelShortType {
  public init(contentType: Swift.String)
}
@_inheritsConvenienceInitializers @objc open class NFX : ObjectiveC.NSObject {
  @objc open class func sharedInstance() -> OrderingPaySDK.NFX
  @objc public enum ENFXGesture : Swift.Int {
    case shake
    case custom
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc open func start()
  @objc open func stop()
  @objc open func isStarted() -> Swift.Bool
  @objc open func setCachePolicy(_ policy: Foundation.URLCache.StoragePolicy)
  @objc open func setGesture(_ gesture: OrderingPaySDK.NFX.ENFXGesture)
  @objc open func show()
  @objc open func show(on rootViewController: UIKit.UIViewController)
  @objc open func hide()
  @objc open func toggle()
  @objc open func ignoreURL(_ url: Swift.String)
  @objc open func getSessionLog() -> Foundation.Data?
  @objc open func ignoreURLs(_ urls: [Swift.String])
  @objc open func ignoreURLsWithRegex(_ regex: Swift.String)
  @objc open func ignoreURLsWithRegexes(_ regexes: [Swift.String])
  @objc override dynamic public init()
  @objc deinit
}
extension OrderingPaySDK.NFX : UIKit.UIAdaptivePresentationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func presentationControllerDidDismiss(_ presentationController: UIKit.UIPresentationController)
}
public struct CustomerData : Swift.Codable {
  public var birthDate: Swift.String?
  public var cif: Swift.String?
  public var customerName: Swift.String?
  public var creditCardEnabled: Swift.Bool?
  public var customProperties: OrderingPaySDK.CustomProperty?
  public var customerStatus: Swift.String?
  public var customerTypeCode: Swift.String?
  public var email: Swift.String?
  public var fawryCustomerNumber: Swift.String?
  public var gender: Swift.String?
  public var id: Swift.Int?
  public var merchantAccountNumber: Swift.String?
  public var mobileNumber: Swift.String?
  public var notificationsPreferredLang: Swift.String?
  public var refreshToken: Swift.String?
  public var token: Swift.String?
  public var totalOrdersAmt: Swift.Int?
  public var totalOrdersCount: Swift.Int?
  public var userType: Swift.String?
  public var generatedInvitationCode: Swift.String?
  public var walletAccounts: [OrderingPaySDK.WalletAccount]?
  public var password: Swift.String?
  public init(birthDate: Swift.String = "", cif: Swift.String = "", customerName: Swift.String = "", creditCardEnabled: Swift.Bool = false, customProperties: OrderingPaySDK.CustomProperty = CustomProperty(), customerStatus: Swift.String = "", customerTypeCode: Swift.String = "", email: Swift.String = "", fawryCustomerNumber: Swift.String = "", gender: Swift.String = "", id: Swift.Int = 0, merchantAccountNumber: Swift.String = "", mobileNumber: Swift.String = "", notificationsPreferredLang: Swift.String = "", refreshToken: Swift.String = "", token: Swift.String = "", totalOrdersAmt: Swift.Int = 0, totalOrdersCount: Swift.Int = 0, userType: Swift.String = "", generatedInvitationCode: Swift.String = "", walletAccounts: [OrderingPaySDK.WalletAccount] = [], password: Swift.String = "")
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers public class DeleteAccountManager : ObjectiveC.NSObject {
  public class var shared: OrderingPaySDK.DeleteAccountManager? {
    get
  }
  public func fawryDeleteAccountLuncher(customerdata: OrderingPaySDK.CustomerData, validator: any OrderingPaySDK.DeleteAccountValidatorType = DeleteAccountValidator(), onCompletionBlock: OrderingPaySDK.CallBacks<Swift.String>)
  @objc public func clearSDK()
  @objc override dynamic public init()
  @objc deinit
}
public struct Gift : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AddOnsModel : Swift.Codable {
  public init(code: Swift.String? = "", namePrimaryLang: Swift.String? = "", nameSecondaryLang: Swift.String? = "", price: Swift.Double = 0.0, status: Swift.String? = "", subAddonsList: [OrderingPaySDK.SubAddon]? = [], itemImages: [OrderingPaySDK.ItemImage]? = [], mandatory: Swift.Bool? = false, hasMandatoryAddons: Swift.Bool? = false, taxAmount: Swift.Double? = 0.0, requiredInputType: OrderingPaySDK.AddOnInputType? = .none, requiredInputMaxLength: Swift.Int? = 0, selectedEncodedImage: Swift.String? = "", enteredText: Swift.String? = "", itemNature: Swift.String? = "", addOnId: Swift.Int? = 0, sku: Swift.String? = "")
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SubAddon : Swift.Codable {
  public init(code: Swift.String? = "", namePrimaryLang: Swift.String? = "", nameSecondaryLang: Swift.String? = "", itemPrice: Swift.Double? = 0.0, taxAmount: Swift.Double? = 0.0, itemImages: [OrderingPaySDK.ItemImage]? = [], status: Swift.String? = "")
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum AddOnInputType : Swift.String, Swift.Codable {
  case image
  case text
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct SaveCardModel {
  public init(brand: Swift.String?, creationDate: Swift.Int64?, lastFourDigits: Swift.String?, token: Swift.String?, cardNumber: Swift.String?, cardExpiryMonth: Swift.String?, cardExpiryYear: Swift.String?, cvv: Swift.String?, firstSixDigits: Swift.String?, accountTypeCode: Swift.String?, cardHolderName: Swift.String?)
}
public enum PlistKey {
  case baseDomain
  case baseRestDomain
  case timeoutInterval
  case urlProtocol
  case port
  case tokenExpirationCode
  case pageSize
  case accountNumber
  case secureKey
  case enableLogger
  public static func == (a: OrderingPaySDK.PlistKey, b: OrderingPaySDK.PlistKey) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (OrderingPaySDK.Reachability) -> Swift.Void
  public typealias NetworkUnreachable = (OrderingPaySDK.Reachability) -> Swift.Void
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: OrderingPaySDK.Reachability.NetworkStatus, b: OrderingPaySDK.Reachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    @available(*, deprecated, renamed: "unavailable")
    case none
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    public static func == (a: OrderingPaySDK.Reachability.Connection, b: OrderingPaySDK.Reachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: OrderingPaySDK.Reachability.NetworkReachable?
  public var whenUnreachable: OrderingPaySDK.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: OrderingPaySDK.Reachability.Connection {
    get
  }
  public var connection: OrderingPaySDK.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension OrderingPaySDK.Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
public enum CategoryEntityType {
  case normalCategory
  case newCategory(products: [OrderingPaySDK.Product])
}
@objc @_inheritsConvenienceInitializers public class CategoryEntity : ObjectiveC.NSObject, Swift.Codable {
  public var itemsCount: Swift.Int?
  public var code: Swift.String?, namePrimaryLang: Swift.String?, nameSecondaryLang: Swift.String?, categoryImageUrl: Swift.String?
  public var subCategories: [OrderingPaySDK.CategoryEntity]?
  public var categoryOrder: Swift.Int
  public var level: Swift.Int?
  public var isExpanded: Swift.Bool
  public var isSelected: Swift.Bool
  public var hasChild: Swift.Bool
  public var depth: Swift.Int
  public var categoryType: OrderingPaySDK.CategoryEntityType
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case itemsCount
    case code, namePrimaryLang, nameSecondaryLang, categoryImageUrl, categoryOrder, level
    case subCategories
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public var name: Swift.String {
    get
  }
  public init(itemsCount: Swift.Int? = nil, code: Swift.String? = nil, namePrimaryLang: Swift.String? = nil, nameSecondaryLang: Swift.String? = nil, categoryImageUrl: Swift.String? = nil, subCategories: [OrderingPaySDK.CategoryEntity]? = nil, isExpanded: Swift.Bool = false, isSelected: Swift.Bool = false, hasChild: Swift.Bool = false, depth: Swift.Int = 1, categoryType: OrderingPaySDK.CategoryEntityType, categoryOrder: Swift.Int = -1, level: Swift.Int? = 0)
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public typealias CategoriesResponse = [OrderingPaySDK.CategoryEntity]
public struct CustomProperty : Swift.Codable {
  public init()
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ChangePasswordRequest {
  public init(customerData: OrderingPaySDK.CustomerData, currentPassword: Swift.String, newPassword: Swift.String, confirmNewPassword: Swift.String)
}
public struct GetBranchByQRCodeAPIResponse : Swift.Codable {
  public init()
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension OrderingPaySDK.ContainerIdentifier {
  public static var local: OrderingPaySDK.ContainerIdentifier
  public static var remote: OrderingPaySDK.ContainerIdentifier
  public static var rest: OrderingPaySDK.ContainerIdentifier
}
public class CardDetailModel {
  public var cardNumber: Swift.String?
  public var cardExpiryMonth: Swift.String?
  public var cardExpiryYear: Swift.String?
  public var cvv: Swift.String?
  public var cardHolderName: Swift.String?
  public init(cardNumber: Swift.String?, cardExpiryMonth: Swift.String?, cardExpiryYear: Swift.String?, cvv: Swift.String?, cardHolderName: Swift.String?)
  @objc deinit
}
extension UIKit.UILabel {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func cstmlayoutSubviews()
}
extension UIKit.UITextField {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func cstmlayoutSubviews()
}
@objc @_inheritsConvenienceInitializers public class LogoutManager : ObjectiveC.NSObject {
  public class var shared: OrderingPaySDK.LogoutManager? {
    get
  }
  public func fawryLogoutLuncher(customerData: OrderingPaySDK.CustomerData, onCompletionBlock: OrderingPaySDK.CallBacks<Swift.Int>)
  @objc public func clearSDK()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RegisterManager : ObjectiveC.NSObject {
  public class var shared: OrderingPaySDK.RegisterManager? {
    get
  }
  public func fawryRegisterationLuncher(onCompletionBlock: OrderingPaySDK.CallBacks<Swift.Bool>)
  @objc public func clearSDK()
  @objc deinit
}
extension FawryFramework.FawryError : Swift.Error {
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class RangeSlider : UIKit.UIControl {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var minimumValue: Swift.Double {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var maximumValue: Swift.Double {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var lowerValue: Swift.Double {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var upperValue: Swift.Double {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var trackTintColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var trackHighlightTintColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var thumbTintColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var thumbBorderColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var thumbBorderWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var curvaceousness: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var frame: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSublayers(of: QuartzCore.CALayer)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func beginTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func continueTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  @objc deinit
}
public struct AddressModel {
  public init(latitude: Swift.Double? = nil, longitude: Swift.Double? = nil, governorate: FawryFramework.Governorate? = nil, geolocation: FawryFramework.Geolocation? = nil, city: FawryFramework.City? = nil, area: FawryFramework.Area? = nil, street: FawryFramework.Street? = nil, building: Swift.String? = nil, floor: Swift.String? = nil, apartment: Swift.String? = nil, landmark: Swift.String? = nil, isDefaultAddress: Swift.Bool? = nil, addressType: Swift.String? = nil, addressTypeId: Swift.String? = nil, addressId: Swift.Int? = nil, addressMode: FawryFramework.AddressMode? = nil, isMock: Swift.Bool, orderRefNum: Swift.String? = nil, address: Swift.String? = nil)
}
public struct OrderItem : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public protocol CustomLocalizedErrorProtocol : Foundation.LocalizedError {
  var code: Swift.String? { get }
}
@_hasMissingDesignatedInitializers public class OrderingPaySDKError : Swift.Codable, OrderingPaySDK.CustomLocalizedErrorProtocol {
  public var code: Swift.String?
  public var failureReason: Swift.String?
  public var description: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public struct ProductsRequestData : Swift.Codable {
  public init(page: Swift.Int, pageSize: Swift.Int, categoryCode: Swift.String, branchCode: Swift.String, branchCategory: Swift.String, serviceTypeCode: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var isModal: Swift.Bool {
    get
  }
}
extension Swift.KeyedDecodingContainer {
  public func decode(_ type: [Any].Type, forKey key: Swift.KeyedDecodingContainer<K>.Key) throws -> [Any]
  public func decode(_ type: [Swift.String : Any].Type, forKey key: Swift.KeyedDecodingContainer<K>.Key) throws -> [Swift.String : Any]
  public func decodeIfPresent(_ type: [Any].Type, forKey key: Swift.KeyedDecodingContainer<K>.Key) throws -> [Any]?
  public func decodeIfPresent(_ type: [Swift.String : Any].Type, forKey key: Swift.KeyedDecodingContainer<K>.Key) throws -> [Swift.String : Any]?
}
public struct MerchantItemVariant : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class RangeSeekSlider : UIKit.UIControl {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) convenience public init(frame: CoreFoundation.CGRect = .zero, completion: ((OrderingPaySDK.RangeSeekSlider) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) weak open var delegate: (any OrderingPaySDK.RangeSeekSliderDelegate)?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var minValue: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var maxValue: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var selectedMinValue: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var selectedMaxValue: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var minLabelFont: UIKit.UIFont {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var maxLabelFont: UIKit.UIFont {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var numberFormatter: Foundation.NumberFormatter
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var hideLabels: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var labelsFixed: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var minDistance: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var maxDistance: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var minLabelColor: UIKit.UIColor?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var maxLabelColor: UIKit.UIColor?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var handleColor: UIKit.UIColor?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var handleBorderColor: UIKit.UIColor?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var colorBetweenHandles: UIKit.UIColor?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var initialColor: UIKit.UIColor?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var disableRange: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var enableStep: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var step: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var handleImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var handleDiameter: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var selectedHandleDiameterMultiplier: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var lineHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var handleBorderWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var labelPadding: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var minLabelAccessibilityLabel: Swift.String?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var maxLabelAccessibilityLabel: Swift.String?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var minLabelAccessibilityHint: Swift.String?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var maxLabelAccessibilityHint: Swift.String?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func beginTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func continueTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElementCount() -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElement(at index: Swift.Int) -> Any?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func index(ofAccessibilityElement element: Any) -> Swift.Int
  @_Concurrency.MainActor(unsafe) open func setupStyle()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @objc deinit
}
public enum CartItemAvailability : Swift.String, Swift.Codable {
  case available
  case outOfStock
  case notAvailable
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ValidateCartResponse : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class Debouncer {
  public init(delay: Foundation.TimeInterval)
  public func run(action: @escaping () -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CategoriesManager {
  public func categoriesManagerLauncher(categoriersCallBacks: OrderingPaySDK.CallBacks<[OrderingPaySDK.CategoryEntity]>, productsCallBacks: OrderingPaySDK.CallBacks<[OrderingPaySDK.Product]>, productDetailsCallBacks: OrderingPaySDK.CallBacks<OrderingPaySDK.Product>, newProductsCallBacks: OrderingPaySDK.CallBacks<[OrderingPaySDK.Product]>, relatedProductsCallBacks: OrderingPaySDK.CallBacks<[OrderingPaySDK.Product]>)
  public func getCategoriesWith(merchantNumber: Swift.String, callBacks: OrderingPaySDK.CallBacks<[OrderingPaySDK.CategoryEntity]>)
  public func getNewProducts(page: Swift.Int, size: Swift.Int, callBacks: OrderingPaySDK.CallBacks<[OrderingPaySDK.Product]>)
  public func getProductsWith(requestData: OrderingPaySDK.AllProductsRequestData, callBacks: OrderingPaySDK.CallBacks<[OrderingPaySDK.Product]>)
  public func getProductsWith(requestData: OrderingPaySDK.ProductsRequestData, callBacks: OrderingPaySDK.CallBacks<[OrderingPaySDK.Product]>)
  public func getAdonsWith(requestData: OrderingPaySDK.ProductsAdonsRequestData, callBacks: OrderingPaySDK.CallBacks<[OrderingPaySDK.AddOnsModel]>)
  public func getCategoriesStep1(merchantNumber: Swift.String)
  public func getProductsStep2(requestData: OrderingPaySDK.AllProductsRequestData)
  public func getProductDetailsStep3(requestData: OrderingPaySDK.ProductDetailsRequestData)
  public func searchProductWith(requestData: OrderingPaySDK.SearchRequestData, callBacks: OrderingPaySDK.CallBacks<[OrderingPaySDK.Product]>)
  public func getProductDetailsWith(requestData: OrderingPaySDK.ProductDetailsRequestData, callBacks: OrderingPaySDK.CallBacks<OrderingPaySDK.Product>)
  public func getRelatedProductsWith(requestData: OrderingPaySDK.RelatedProductsRequestData)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MerchantsListManger : ObjectiveC.NSObject {
  public func merchantsListManagerLauncher(onMerchantsListCompleteBlock: OrderingPaySDK.CallBacks<[OrderingPaySDK.MerchantsList]>)
  public func getMerchantsStep1()
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol PaginatedTableViewDataSource {
  @objc func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc optional func tableView(_ tableView: UIKit.UITableView, editingStyleForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell.EditingStyle
  @objc optional func tableView(_ tableView: UIKit.UITableView, commit editingStyle: UIKit.UITableViewCell.EditingStyle, forRowAt indexPath: Foundation.IndexPath)
}
@objc public protocol PaginatedTableViewDelegate {
  @objc optional func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @objc optional func tableView(_ tableView: UIKit.UITableView, estimatedHeightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @objc optional func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @objc optional func tableView(_ tableView: UIKit.UITableView, didEndDisplaying cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @objc func loadMore(_ pageNumber: Swift.Int, _ pageSize: Swift.Int)
  @objc optional func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @objc optional func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @objc optional func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class PaginatedTableView : UIKit.UITableView {
  @_Concurrency.MainActor(unsafe) public var pageSize: Swift.Int
  @_Concurrency.MainActor(unsafe) public var firstPage: Swift.Int
  @_Concurrency.MainActor(unsafe) public var loadMoreViewHeight: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var heightForHeaderInSection: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var titleForHeaderInSection: Swift.String
  @_Concurrency.MainActor(unsafe) public var pullToRefreshTitle: Foundation.NSAttributedString? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var enablePullToRefresh: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak open var paginatedDelegate: (any OrderingPaySDK.PaginatedTableViewDelegate)?
  @_Concurrency.MainActor(unsafe) weak open var paginatedDataSource: (any OrderingPaySDK.PaginatedTableViewDataSource)?
  @_Concurrency.MainActor(unsafe) public var customReloadDataBlock: (() -> Swift.Void)?
  @objc deinit
}
extension OrderingPaySDK.PaginatedTableView {
  @_Concurrency.MainActor(unsafe) public func loadData(refresh: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
}
extension OrderingPaySDK.PaginatedTableView : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, estimatedHeightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didEndDisplaying cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, titleForHeaderInSection section: Swift.Int) -> Swift.String?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, commit editingStyle: UIKit.UITableViewCell.EditingStyle, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, editingStyleForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell.EditingStyle
}
extension OrderingPaySDK.PaginatedTableView : UIKit.UITableViewDataSourcePrefetching {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, prefetchRowsAt indexPaths: [Foundation.IndexPath])
}
public struct RequestOTPRequest {
  public init(language: OrderingPaySDK.LanguageEnum, mobileNumber: Swift.String)
}
public struct ShippingInfo : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case courierCode
    case courierTemplateFileName
    case customerAddress
    case deliveryStatusCode
    case deliveryStatusDisplayName
    case shippingFees
    case branchServiceTypeCode
    case branch
    case branchCode
    case estimatedTime
    case branchNameAr
    case branchNameEn
    case deliveryDate
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RegisterDataRequest {
  public let customerName: Swift.String?
  public let userName: Swift.String?
  public let email: Swift.String?
  public let password: Swift.String?
  public let mobileNumber: Swift.String?
  public let confirmPassword: Swift.String?
  public let gender: OrderingPaySDK.GenderEnum?
  public let birthDate: Swift.String?
  public let customerType: OrderingPaySDK.CustomerTypeEnum?
  public let notificationsPreferredLang: OrderingPaySDK.LanguageEnum?
  public let invitationCode: Swift.String?
  public let address: OrderingPaySDK.AddressBodyModel?
  public init(customerName: Swift.String?, userName: Swift.String, email: Swift.String?, password: Swift.String?, mobileNumber: Swift.String?, confirmPassword: Swift.String?, gender: OrderingPaySDK.GenderEnum?, birthDate: Swift.String?, customerType: OrderingPaySDK.CustomerTypeEnum? = nil, notificationsPreferredLang: OrderingPaySDK.LanguageEnum?, invitationCode: Swift.String? = nil, address: OrderingPaySDK.AddressBodyModel? = nil)
}
public enum GenderEnum : Swift.String {
  case MALE
  case FEMALE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CustomerTypeEnum : Swift.String {
  case REGISTERED
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct OrdersRequestData : Swift.Codable {
  public init(page: Swift.Int?, pageSize: Swift.Int?, filter: [Swift.String : Swift.String]?, referenceNumber: Swift.String?, token: Swift.String?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ChooseServiceAPIResponse : Swift.Codable {
  public init()
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public typealias ServicesList = [OrderingPaySDK.ChooseServiceAPIResponse]
extension UIKit.UIAlertController {
  @_Concurrency.MainActor(unsafe) public func show(animated: Swift.Bool = true, vibrate: Swift.Bool = false, style: UIKit.UIBlurEffect.Style? = nil, completion: (() -> Swift.Void)? = nil)
}
public struct RateOrderRequestData : Swift.Codable {
  public init(orderId: Swift.String, score: Swift.Int, feedback: Swift.String, branch: Swift.String, token: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ProductDetailsRequestData : Swift.Codable {
  public init(branchCode: Swift.String, branchCategory: Swift.String, productCode: Swift.String, merchantAccountNumber: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CallBacks<T> {
  public var onStartBlock: (OrderingPaySDK.OrderingPaySDKError?) -> Swift.Void
  public var onErrorBlock: (OrderingPaySDK.OrderingPaySDKError?) -> Swift.Void
  public var onCompleteBlock: (T?) -> Swift.Void
  public init(onStartBlock: @escaping (OrderingPaySDK.OrderingPaySDKError?) -> Swift.Void, onErrorBlock: @escaping (OrderingPaySDK.OrderingPaySDKError?) -> Swift.Void, onCompleteBlock: @escaping (T?) -> Swift.Void)
}
extension Swift.Error {
  public var message: Swift.String {
    get
  }
  public var isNoInternet: Swift.Bool {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class CartManager : ObjectiveC.NSObject {
  public func cartManagerLauncher(onLoadCartItemsCompleteBlock: OrderingPaySDK.CallBacks<[OrderingPaySDK.OrderingProduct]>, onAddItemCompleteBlock: OrderingPaySDK.CallBacks<Swift.Bool>, onAddItemPlusButtonCompleteBlock: OrderingPaySDK.CallBacks<Swift.Bool>, onRemoveItemCompleteBlock: OrderingPaySDK.CallBacks<Swift.Bool>, onEditItemCAllBacks: OrderingPaySDK.CallBacks<Swift.Bool>, onDeleteItemCompleteBlock: OrderingPaySDK.CallBacks<Swift.Bool>, onEmptyCartCompleteBlock: OrderingPaySDK.CallBacks<Swift.Bool>, onValidateCartCAllBacks: OrderingPaySDK.CallBacks<[OrderingPaySDK.ValidateCartResponse]>)
  public func loadCartItems(merchantNumber: Swift.String, callBacks: OrderingPaySDK.CallBacks<[OrderingPaySDK.OrderingProduct]>)
  public func addItemToCart(merchantNumber: Swift.String, product: OrderingPaySDK.OrderingProduct, callBacks: OrderingPaySDK.CallBacks<Swift.Bool>)
  public func addItem(in index: Swift.Int, merchantNumber: Swift.String, callBacks: OrderingPaySDK.CallBacks<Swift.Bool>)
  public func removeItem(at index: Swift.Int, merchantNumber: Swift.String, callBacks: OrderingPaySDK.CallBacks<Swift.Bool>)
  public func deleteItem(at index: Swift.Int, callBacks: OrderingPaySDK.CallBacks<Swift.Bool>)
  public func editCartItem(merchantNumber: Swift.String, newProduct: OrderingPaySDK.OrderingProduct, oldProduct: OrderingPaySDK.OrderingProduct, callBacks: OrderingPaySDK.CallBacks<Swift.Bool>)
  public func deleteTrashButton(merchantNumber: Swift.String, orderingProduct: OrderingPaySDK.OrderingProduct, callBacks: OrderingPaySDK.CallBacks<Swift.Bool>)
  public func emptyCart(merchantNumber: Swift.String, callBacks: OrderingPaySDK.CallBacks<Swift.Bool>)
  public func validateCartItems(branchCode: Swift.String, serviceTypeCode: Swift.String, merchantNumber: Swift.String, callBacks: OrderingPaySDK.CallBacks<[OrderingPaySDK.ValidateCartResponse]>)
  public func loadCartItemsStep1(merchantNumber: Swift.String)
  public func addItemToCartStep2(merchantNumber: Swift.String, orderingProduct: OrderingPaySDK.OrderingProduct)
  public func addItemPlusButtonStep3(in index: Swift.Int, merchantNumber: Swift.String)
  public func removeItemMinusButtonStep4(in index: Swift.Int, merchantNumber: Swift.String)
  public func editCartStep5(merchantNumber: Swift.String, newProduct: OrderingPaySDK.OrderingProduct, oldProduct: OrderingPaySDK.OrderingProduct)
  public func deleteItemsTrashButtonStep6(merchantNumber: Swift.String, orderingProduct: OrderingPaySDK.OrderingProduct)
  public func emptyCartStep7(merchantNumber: Swift.String)
  public func validateCartStep8(branchCode: Swift.String, serviceTypeCode: Swift.String, merchantNumber: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
public enum LanguageEnum : Swift.String {
  case ARABIC
  case ENGLISH
  case ARABIC_AND_ENGLISH
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Environment {
  public func configuration(_ key: OrderingPaySDK.PlistKey) -> Foundation.NSString
  public func configuration(_ key: OrderingPaySDK.PlistKey) -> Swift.String
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) public func setImage(view: UIKit.UIView, imageUrl: Swift.String, defaultImageName: Swift.String)
}
public struct MerchantsList : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc public class Product : ObjectiveC.NSObject, Swift.Codable {
  public init(productId: Swift.Int? = 0, code: Swift.String? = "", sku: Swift.String? = "", namePrimaryLang: Swift.String? = "", nameSecondaryLang: Swift.String? = "", shortDescriptionEnglish: Swift.String? = "", shortDescriptionArabic: Swift.String? = "", currentlyAvailableItemsCount: Swift.Int? = 0, totalItemsCount: Swift.Int? = 0, itemPrice: Swift.Double? = 0.0, status: Swift.String? = "", descriptionPrimaryLang: Swift.String? = "", descriptionSecondaryLang: Swift.String? = "", stockCount: Swift.Int? = 0, usedItemsCount: Swift.Int? = 0, comparablePrice: Swift.Double? = 0.0, itemImages: [OrderingPaySDK.ItemImage]? = [], merchantItemCategory: OrderingPaySDK.MerchantItemCategory? = MerchantItemCategory(), options: [OrderingPaySDK.ProductOption]? = [], variants: [OrderingPaySDK.Variant]? = [], taxesDataModel: [OrderingPaySDK.TaxDataModel]? = [], taxAmount: Swift.Double? = 0.0, hotEvent: Swift.Int? = 0, priceIncludedTax: Swift.Bool? = false, merchant: OrderingPaySDK.Merchant? = Merchant(), trackInventory: Swift.Bool? = false, publishingDate: Swift.Int? = 0, brands: [OrderingPaySDK.MerchantItemCategory]? = [], length: Swift.Int? = 0, width: Swift.Int? = 0, height: Swift.Int? = 0, originalPrice: Swift.Double? = 0.0, weight: Swift.Int? = 0, bundles: [OrderingPaySDK.BundleOfferEarningRule]? = [], tags: [Swift.String]? = [], customAddons: [OrderingPaySDK.AddOnsModel]? = [], addons: [OrderingPaySDK.AddOnsModel]? = [], notes: Swift.String? = "", hasMandatoryAddons: Swift.Bool? = false)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class MerchantItemCategory : ObjectiveC.NSObject, Swift.Codable {
  public init(code: Swift.String? = "", namePrimaryLang: Swift.String? = "", nameSecondaryLang: Swift.String? = "")
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class ItemImage : ObjectiveC.NSObject, Swift.Codable {
  public init(imgcode: Swift.String? = "", imgPath: Swift.String? = "", status: Swift.String? = "", isMainImage: Swift.Int? = 0)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct Merchant : Swift.Codable {
  public init(nameEnglish: Swift.String? = "", nameArabic: Swift.String? = "", accountNumber: Swift.String? = "")
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc public class ProductOption : ObjectiveC.NSObject, Swift.Codable {
  public init(code: Swift.String? = "", optionName: Swift.String? = "", optionValues: [OrderingPaySDK.OptionValue]? = [], status: Swift.String? = "", optionOrder: Swift.Int? = 0, isMandatory: Swift.Bool? = false, optionItemHeader: Swift.String? = "", optionitemHeaderCode: Swift.String? = "")
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct OptionValue : Swift.Codable {
  public init(display: Swift.String = "", value: Swift.String = "", isSelected: Swift.Bool = false, customPrice: Swift.Double? = 0.0, images: [OrderingPaySDK.ItemImage]? = [], tax: Swift.Double? = 0.0, code: Swift.String? = "", inputType: OrderingPaySDK.AddOnInputType? = .none, inputLimit: Swift.Int? = 0, selectedEncodedImage: Swift.String? = "", enteredText: Swift.String? = "")
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct OptionValueImage : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc public class Variant : ObjectiveC.NSObject, Swift.Codable {
  public var variantId: Swift.Int?
  public var code: Swift.String?
  public var variantTitle: Swift.String?
  public var variantTitleCode: Swift.String?
  public var price: Swift.Double?
  public var sku: Swift.String?
  public var inventory: Swift.Int?
  public var status: Swift.String?
  public var quantityAvailable: Swift.Int?
  public var validUpdateVariantData: Swift.Bool?
  public var usedItemsCount: Swift.Int?
  public var originalPrice: Swift.Double?
  public var itemVariantImages: [OrderingPaySDK.ItemImage]?
  public var taxAmount: Swift.Double?
  public var product: OrderingPaySDK.Product?
  public var priceWithTax: Swift.Double? {
    get
  }
  public var originalPriceWithTax: Swift.Double? {
    get
  }
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case variantId
    case code, variantTitle, variantTitleCode, price, sku, inventory, status, taxAmount
    case validUpdateVariantData, usedItemsCount, originalPrice, quantityAvailable
    case itemVariantImages
    case product
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(variantId: Swift.Int? = 0, code: Swift.String? = "", variantTitle: Swift.String? = "", variantTitleCode: Swift.String? = "", price: Swift.Double? = 0.0, sku: Swift.String? = "", inventory: Swift.Int? = 0, status: Swift.String? = "", quantityAvailable: Swift.Int? = 0, validUpdateVariantData: Swift.Bool? = false, usedItemsCount: Swift.Int? = 0, originalPrice: Swift.Double? = 0.0, itemVariantImages: [OrderingPaySDK.ItemImage]? = [], taxAmount: Swift.Double? = 0.0)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public typealias MerchantProducts = [OrderingPaySDK.Product]
public typealias HomeProducts = [OrderingPaySDK.Product]
public struct LocaleInfo {
  public var locale: Foundation.Locale?
  public var id: Swift.String? {
    get
  }
  public var country: Swift.String
  public var code: Swift.String
  public var phoneCode: Swift.String
  public var flag: UIKit.UIImage? {
    get
  }
  public var currencyCode: Swift.String? {
    get
  }
  public var currencySymbol: Swift.String? {
    get
  }
  public var currencyName: Swift.String? {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class ForgetPasswordManager : ObjectiveC.NSObject {
  public class var shared: OrderingPaySDK.ForgetPasswordManager? {
    get
  }
  public func fawryForgetPasswordLuncher(forgetPassordRequest: OrderingPaySDK.ForgetPasswordRequest, onCompletionBlock: OrderingPaySDK.CallBacks<Swift.Int>)
  @objc public func clearSDK()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class LoginManager : ObjectiveC.NSObject {
  public func fawryLoginLuncher(onCompletionBlock: OrderingPaySDK.CallBacks<OrderingPaySDK.CustomerData>)
  @objc deinit
}
extension Swift.Encodable {
  public func toJSON(_ encoder: Foundation.JSONEncoder = JSONEncoder()) -> Foundation.NSString
}
public struct CustomerOrdersAPIResponse : Swift.Codable {
  public init()
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension UIKit.UIView.AnimationOptions {
  public static var localizedFlipTransition: UIKit.UIView.AnimationOptions {
    get
  }
}
public struct WalletAccount : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CreateNewPasswordRequest {
  public let mobileNumber: Swift.String
  public let newPassword: Swift.String
  public let activationCode: Swift.String
  public init(activationCode: Swift.String, mobileNumber: Swift.String, newPassword: Swift.String)
}
@objc @_inheritsConvenienceInitializers public class CheckoutManager : ObjectiveC.NSObject {
  public func CheckoutManagerLauncher(checkoutCallBacks: OrderingPaySDK.CallBacks<FawryFramework.PaymentChargeResponse?>)
  public func checkoutOn(viewController: UIKit.UIViewController, requestData: OrderingPaySDK.CheckoutRequestData)
  @objc override dynamic public init()
  @objc deinit
}
public class CartEntity : Swift.Codable {
  public var subtotalPrice: Swift.Double?
  public var taxes: Swift.Double?
  public var discount: Swift.Double?
  public var serviceFees: Swift.Double?
  public var total: Swift.Double?
  public var totalPrice: Swift.Double?
  public var cartProducts: [OrderingPaySDK.CartProductEntity]
  public var orderingProducts: [OrderingPaySDK.OrderingProduct] {
    get
  }
  public init(subtotalPrice: Swift.Double, cartProducts: [OrderingPaySDK.CartProductEntity])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class TapticEngine {
  public static let impact: OrderingPaySDK.TapticEngine.Impact
  public static let selection: OrderingPaySDK.TapticEngine.Selection
  public static let notification: OrderingPaySDK.TapticEngine.Notification
  @_hasMissingDesignatedInitializers open class Impact {
    public enum ImpactStyle {
      case light, medium, heavy
      public static func == (a: OrderingPaySDK.TapticEngine.Impact.ImpactStyle, b: OrderingPaySDK.TapticEngine.Impact.ImpactStyle) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func feedback(_ style: OrderingPaySDK.TapticEngine.Impact.ImpactStyle)
    public func prepare(_ style: OrderingPaySDK.TapticEngine.Impact.ImpactStyle)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class Selection {
    public func feedback()
    public func prepare()
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class Notification {
    public enum NotificationType {
      case success, warning, error
      public static func == (a: OrderingPaySDK.TapticEngine.Notification.NotificationType, b: OrderingPaySDK.TapticEngine.Notification.NotificationType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func feedback(_ type: OrderingPaySDK.TapticEngine.Notification.NotificationType)
    public func prepare()
    @objc deinit
  }
  @objc deinit
}
public protocol RangeSeekSliderDelegate : AnyObject {
  func rangeSeekSlider(_ slider: OrderingPaySDK.RangeSeekSlider, didChange minValue: CoreFoundation.CGFloat, maxValue: CoreFoundation.CGFloat)
  func didStartTouches(in slider: OrderingPaySDK.RangeSeekSlider)
  func didEndTouches(in slider: OrderingPaySDK.RangeSeekSlider)
  func rangeSeekSlider(_ slider: OrderingPaySDK.RangeSeekSlider, stringForMinValue minValue: CoreFoundation.CGFloat) -> Swift.String?
  func rangeSeekSlider(_ slider: OrderingPaySDK.RangeSeekSlider, stringForMaxValue: CoreFoundation.CGFloat) -> Swift.String?
}
extension OrderingPaySDK.RangeSeekSliderDelegate {
  public func rangeSeekSlider(_ slider: OrderingPaySDK.RangeSeekSlider, didChange minValue: CoreFoundation.CGFloat, maxValue: CoreFoundation.CGFloat)
  public func didStartTouches(in slider: OrderingPaySDK.RangeSeekSlider)
  public func didEndTouches(in slider: OrderingPaySDK.RangeSeekSlider)
  public func rangeSeekSlider(_ slider: OrderingPaySDK.RangeSeekSlider, stringForMinValue minValue: CoreFoundation.CGFloat) -> Swift.String?
  public func rangeSeekSlider(_ slider: OrderingPaySDK.RangeSeekSlider, stringForMaxValue maxValue: CoreFoundation.CGFloat) -> Swift.String?
}
public struct FindCourierModel {
  public init(customerData: OrderingPaySDK.CustomerData, merchantData: OrderingPaySDK.MerchantLaunchData, branchCode: Swift.String, serviceTypeCode: Swift.String, shippingAddress: FawryFramework.AddressList?, chargeInfo: FawryFramework.ChargeItemsParamsModel?)
}
extension UIKit.UIColor {
  convenience public init?(hexString: Swift.String?, alpha: CoreFoundation.CGFloat = 1.0)
}
public class LoginDataRequest {
  public init(mobileNumber: Swift.String, password: Swift.String)
  @objc deinit
}
public enum CartProductEntityType : Swift.String, Swift.Codable {
  case gift
  case bundle
  case normalProduct
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class CardsManager {
  public func cardManagerLauncher(onSaveNewCardCompleteBlock: OrderingPaySDK.CallBacks<FawryFramework.SavedCard>, onDeleteCardCompleteBlock: OrderingPaySDK.CallBacks<FawryFramework.DeleteCardResponse>, onGetSavedCardsCompleteBlock: OrderingPaySDK.CallBacks<[FawryFramework.SavedCard]>)
  public func saveNewCard(cardModel: OrderingPaySDK.CardDetailModel, customerData: OrderingPaySDK.CustomerData)
  public func deleteCard(cardModel: OrderingPaySDK.SaveCardModel, language: Swift.String = AppLanguage.English, customerData: OrderingPaySDK.CustomerData)
  public func getSavedCards(language: Swift.String = AppLanguage.English, customerData: OrderingPaySDK.CustomerData)
  @objc deinit
}
public struct BundleOfferEarningRule : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension UIKit.UICollectionViewFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var flipsHorizontallyInOppositeLayoutDirection: Swift.Bool {
    @objc get
  }
}
public protocol ResolverRegistering {
  static func registerAllServices()
}
public protocol Resolving {
  var resolver: OrderingPaySDK.Resolver { get }
}
extension OrderingPaySDK.Resolving {
  public var resolver: OrderingPaySDK.Resolver {
    get
  }
}
final public class Resolver {
  public static let main: OrderingPaySDK.Resolver
  public static var root: OrderingPaySDK.Resolver
  public static var defaultScope: any OrderingPaySDK.ResolverScope
  public init(parent: OrderingPaySDK.Resolver? = nil)
  final public func registerServices()
  public static var registerServices: (() -> Swift.Void)?
  @discardableResult
  public static func register<Service>(_ type: Service.Type = Service.self, name: OrderingPaySDK.ContainerIdentifier? = nil, factory: @escaping OrderingPaySDK.ResolverFactory<Service>) -> OrderingPaySDK.ResolverOptions<Service>
  @discardableResult
  public static func register<Service>(_ type: Service.Type = Service.self, name: OrderingPaySDK.ContainerIdentifier? = nil, factory: @escaping OrderingPaySDK.ResolverFactoryResolver<Service>) -> OrderingPaySDK.ResolverOptions<Service>
  @discardableResult
  public static func register<Service>(_ type: Service.Type = Service.self, name: OrderingPaySDK.ContainerIdentifier? = nil, factory: @escaping OrderingPaySDK.ResolverFactoryArguments<Service>) -> OrderingPaySDK.ResolverOptions<Service>
  @discardableResult
  final public func register<Service>(_ type: Service.Type = Service.self, name: OrderingPaySDK.ContainerIdentifier? = nil, factory: @escaping OrderingPaySDK.ResolverFactory<Service>) -> OrderingPaySDK.ResolverOptions<Service>
  @discardableResult
  final public func register<Service>(_ type: Service.Type = Service.self, name: OrderingPaySDK.ContainerIdentifier? = nil, factory: @escaping OrderingPaySDK.ResolverFactoryResolver<Service>) -> OrderingPaySDK.ResolverOptions<Service>
  @discardableResult
  final public func register<Service>(_ type: Service.Type = Service.self, name: OrderingPaySDK.ContainerIdentifier? = nil, factory: @escaping OrderingPaySDK.ResolverFactoryArguments<Service>) -> OrderingPaySDK.ResolverOptions<Service>
  public static func resolve<Service>(_ type: Service.Type = Service.self, name: OrderingPaySDK.ContainerIdentifier? = nil, args: Any? = nil) -> Service
  final public func resolve<Service>(_ type: Service.Type = Service.self, name: OrderingPaySDK.ContainerIdentifier? = nil, args: Any? = nil) -> Service
  public static func optional<Service>(_ type: Service.Type = Service.self, name: OrderingPaySDK.ContainerIdentifier? = nil, args: Any? = nil) -> Service?
  final public func optional<Service>(_ type: Service.Type = Service.self, name: OrderingPaySDK.ContainerIdentifier? = nil, args: Any? = nil) -> Service?
  @objc deinit
}
public typealias ResolverFactory<Service> = () -> Service?
public typealias ResolverFactoryResolver<Service> = (_ resolver: OrderingPaySDK.Resolver) -> Service?
public typealias ResolverFactoryArguments<Service> = (_ resolver: OrderingPaySDK.Resolver, _ args: Any?) -> Service?
public typealias ResolverFactoryMutator<Service> = (_ resolver: OrderingPaySDK.Resolver, _ service: Service) -> Swift.Void
public typealias ResolverFactoryMutatorArguments<Service> = (_ resolver: OrderingPaySDK.Resolver, _ service: Service, _ args: Any?) -> Swift.Void
public class ResolverOptions<Service> {
  public var scope: any OrderingPaySDK.ResolverScope
  public init(resolver: OrderingPaySDK.Resolver, factory: @escaping OrderingPaySDK.ResolverFactoryArguments<Service>)
  @discardableResult
  final public func implements<Protocol>(_ type: Protocol.Type, name: OrderingPaySDK.ContainerIdentifier? = nil) -> OrderingPaySDK.ResolverOptions<Service>
  @discardableResult
  final public func resolveProperties(_ block: @escaping OrderingPaySDK.ResolverFactoryMutator<Service>) -> OrderingPaySDK.ResolverOptions<Service>
  @discardableResult
  final public func resolveProperties(_ block: @escaping OrderingPaySDK.ResolverFactoryMutatorArguments<Service>) -> OrderingPaySDK.ResolverOptions<Service>
  @discardableResult
  final public func scope(_ scope: any OrderingPaySDK.ResolverScope) -> OrderingPaySDK.ResolverOptions<Service>
  @objc deinit
}
final public class ResolverRegistration<Service> : OrderingPaySDK.ResolverOptions<Service> {
  final public var key: Swift.Int
  final public var cacheKey: Swift.String
  public init(resolver: OrderingPaySDK.Resolver, key: Swift.Int, name: OrderingPaySDK.ContainerIdentifier?, factory: @escaping OrderingPaySDK.ResolverFactoryArguments<Service>)
  final public func resolve(resolver: OrderingPaySDK.Resolver, args: Any?) -> Service?
  @objc deinit
}
extension OrderingPaySDK.Resolver {
  public static let application: OrderingPaySDK.ResolverScopeApplication
  public static let cached: OrderingPaySDK.ResolverScopeCache
  public static let graph: OrderingPaySDK.ResolverScopeGraph
  public static let shared: OrderingPaySDK.ResolverScopeShare
  public static let unique: OrderingPaySDK.ResolverScopeUnique
}
public protocol ResolverScope : AnyObject {
  func resolve<Service>(resolver: OrderingPaySDK.Resolver, registration: OrderingPaySDK.ResolverRegistration<Service>, args: Any?) -> Service?
}
public class ResolverScopeApplication : OrderingPaySDK.ResolverScope {
  public init()
  final public func resolve<Service>(resolver: OrderingPaySDK.Resolver, registration: OrderingPaySDK.ResolverRegistration<Service>, args: Any?) -> Service?
  @objc deinit
}
@_inheritsConvenienceInitializers final public class ResolverScopeCache : OrderingPaySDK.ResolverScopeApplication {
  override public init()
  final public func reset()
  @objc deinit
}
final public class ResolverScopeGraph : OrderingPaySDK.ResolverScope {
  public init()
  final public func resolve<Service>(resolver: OrderingPaySDK.Resolver, registration: OrderingPaySDK.ResolverRegistration<Service>, args: Any?) -> Service?
  @objc deinit
}
final public class ResolverScopeShare : OrderingPaySDK.ResolverScope {
  public init()
  final public func resolve<Service>(resolver: OrderingPaySDK.Resolver, registration: OrderingPaySDK.ResolverRegistration<Service>, args: Any?) -> Service?
  final public func reset()
  @objc deinit
}
final public class ResolverScopeUnique : OrderingPaySDK.ResolverScope {
  public init()
  final public func resolve<Service>(resolver: OrderingPaySDK.Resolver, registration: OrderingPaySDK.ResolverRegistration<Service>, args: Any?) -> Service?
  @objc deinit
}
public protocol StoryboardResolving : OrderingPaySDK.Resolving {
  func resolveViewController()
}
extension UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var resolving: Swift.Bool {
    @objc get
    @objc set
  }
}
@propertyWrapper public struct Injected<Service> {
  public init()
  public init(name: OrderingPaySDK.ContainerIdentifier? = nil, container: OrderingPaySDK.Resolver? = nil)
  public var wrappedValue: Service {
    get
    set
  }
  public var projectedValue: OrderingPaySDK.Injected<Service> {
    get
    set
  }
}
@propertyWrapper public struct LazyInjected<Service> {
  public var container: OrderingPaySDK.Resolver?
  public var name: OrderingPaySDK.ContainerIdentifier?
  public init()
  public init(name: OrderingPaySDK.ContainerIdentifier? = nil, container: OrderingPaySDK.Resolver? = nil)
  public var isEmpty: Swift.Bool {
    get
  }
  public var wrappedValue: Service {
    mutating get
    set
  }
  public var projectedValue: OrderingPaySDK.LazyInjected<Service> {
    get
    set
  }
  public mutating func release()
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@propertyWrapper @_Concurrency.MainActor(unsafe) public struct InjectedObject<Service> : SwiftUI.DynamicProperty where Service : Combine.ObservableObject {
  @_Concurrency.MainActor(unsafe) public init()
  @_Concurrency.MainActor(unsafe) public init(name: OrderingPaySDK.ContainerIdentifier? = nil, container: OrderingPaySDK.Resolver? = nil)
  @_Concurrency.MainActor(unsafe) public var wrappedValue: Service {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var projectedValue: SwiftUI.ObservedObject<Service>.Wrapper {
    get
  }
}
extension OrderingPaySDK.Resolver {
  final public func resolve<Service>(_ type: Service.Type = Service.self, name: OrderingPaySDK.ContainerIdentifier? = nil, arg0: Any? = nil, arg1: Any? = nil, arg2: Any? = nil, arg3: Any? = nil, arg4: Any? = nil, arg5: Any? = nil) -> Service
  final public func resolve<Service>(_ type: Service.Type = Service.self, name: OrderingPaySDK.ContainerIdentifier? = nil, params: Any...) -> Service
  final public func resolveArguments(from args: Any) -> [Any]
}
public struct ContainerIdentifier {
}
public struct CustomerAddres : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case address
    case receiverName
    case govDisplayName
    case cityDisplayName
    case areaDisplayName
    case floorNumber
    case apartmentNumber
    case buildingNumber
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum ValidatorType {
  case email
  case required(localizedFieldName: Swift.String)
  case age
  case password
  case confirmPassword(password: Swift.String)
  case confirmEmail(_: Swift.String)
  case mobileNumber
  case characterCount(_: Swift.Int)
  case fullName
}
extension UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
}
extension OrderingPaySDK.FawrySDKStatusCode : Swift.Equatable {}
extension OrderingPaySDK.FawrySDKStatusCode : Swift.Hashable {}
extension OrderingPaySDK.FawrySDKStatusCode : Swift.RawRepresentable {}
extension OrderingPaySDK.Status : Swift.Equatable {}
extension OrderingPaySDK.Status : Swift.Hashable {}
extension OrderingPaySDK.Status : Swift.RawRepresentable {}
extension OrderingPaySDK.APIOrderStatus : Swift.Equatable {}
extension OrderingPaySDK.APIOrderStatus : Swift.Hashable {}
extension OrderingPaySDK.APIOrderStatus : Swift.RawRepresentable {}
extension OrderingPaySDK.GiftEntityType : Swift.Equatable {}
extension OrderingPaySDK.GiftEntityType : Swift.Hashable {}
extension OrderingPaySDK.GiftEntityType : Swift.RawRepresentable {}
extension OrderingPaySDK.GiftEntityDiscountType : Swift.Equatable {}
extension OrderingPaySDK.GiftEntityDiscountType : Swift.Hashable {}
extension OrderingPaySDK.GiftEntityDiscountType : Swift.RawRepresentable {}
extension OrderingPaySDK.OfferCampaignType : Swift.Equatable {}
extension OrderingPaySDK.OfferCampaignType : Swift.Hashable {}
extension OrderingPaySDK.OfferCampaignType : Swift.RawRepresentable {}
extension OrderingPaySDK.CheckBox.Style : Swift.Equatable {}
extension OrderingPaySDK.CheckBox.Style : Swift.Hashable {}
extension OrderingPaySDK.HTTPModelShortType : Swift.Equatable {}
extension OrderingPaySDK.HTTPModelShortType : Swift.Hashable {}
extension OrderingPaySDK.HTTPModelShortType : Swift.RawRepresentable {}
extension OrderingPaySDK.NFX.ENFXGesture : Swift.Equatable {}
extension OrderingPaySDK.NFX.ENFXGesture : Swift.Hashable {}
extension OrderingPaySDK.NFX.ENFXGesture : Swift.RawRepresentable {}
extension OrderingPaySDK.AddOnInputType : Swift.Equatable {}
extension OrderingPaySDK.AddOnInputType : Swift.Hashable {}
extension OrderingPaySDK.AddOnInputType : Swift.RawRepresentable {}
extension OrderingPaySDK.PlistKey : Swift.Equatable {}
extension OrderingPaySDK.PlistKey : Swift.Hashable {}
@available(*, unavailable, renamed: "Connection")
extension OrderingPaySDK.Reachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension OrderingPaySDK.Reachability.NetworkStatus : Swift.Hashable {}
extension OrderingPaySDK.Reachability.Connection : Swift.Equatable {}
extension OrderingPaySDK.Reachability.Connection : Swift.Hashable {}
extension OrderingPaySDK.CategoryEntity.CodingKeys : Swift.Equatable {}
extension OrderingPaySDK.CategoryEntity.CodingKeys : Swift.Hashable {}
extension OrderingPaySDK.CategoryEntity.CodingKeys : Swift.RawRepresentable {}
extension OrderingPaySDK.CartItemAvailability : Swift.Equatable {}
extension OrderingPaySDK.CartItemAvailability : Swift.Hashable {}
extension OrderingPaySDK.CartItemAvailability : Swift.RawRepresentable {}
extension OrderingPaySDK.ShippingInfo.CodingKeys : Swift.Equatable {}
extension OrderingPaySDK.ShippingInfo.CodingKeys : Swift.Hashable {}
extension OrderingPaySDK.ShippingInfo.CodingKeys : Swift.RawRepresentable {}
extension OrderingPaySDK.GenderEnum : Swift.Equatable {}
extension OrderingPaySDK.GenderEnum : Swift.Hashable {}
extension OrderingPaySDK.GenderEnum : Swift.RawRepresentable {}
extension OrderingPaySDK.CustomerTypeEnum : Swift.Equatable {}
extension OrderingPaySDK.CustomerTypeEnum : Swift.Hashable {}
extension OrderingPaySDK.CustomerTypeEnum : Swift.RawRepresentable {}
extension OrderingPaySDK.LanguageEnum : Swift.Equatable {}
extension OrderingPaySDK.LanguageEnum : Swift.Hashable {}
extension OrderingPaySDK.LanguageEnum : Swift.RawRepresentable {}
extension OrderingPaySDK.Variant.CodingKeys : Swift.Equatable {}
extension OrderingPaySDK.Variant.CodingKeys : Swift.Hashable {}
extension OrderingPaySDK.Variant.CodingKeys : Swift.RawRepresentable {}
extension OrderingPaySDK.TapticEngine.Impact.ImpactStyle : Swift.Equatable {}
extension OrderingPaySDK.TapticEngine.Impact.ImpactStyle : Swift.Hashable {}
extension OrderingPaySDK.TapticEngine.Notification.NotificationType : Swift.Equatable {}
extension OrderingPaySDK.TapticEngine.Notification.NotificationType : Swift.Hashable {}
extension OrderingPaySDK.CartProductEntityType : Swift.Equatable {}
extension OrderingPaySDK.CartProductEntityType : Swift.Hashable {}
extension OrderingPaySDK.CartProductEntityType : Swift.RawRepresentable {}
extension OrderingPaySDK.CustomerAddres.CodingKeys : Swift.Equatable {}
extension OrderingPaySDK.CustomerAddres.CodingKeys : Swift.Hashable {}
extension OrderingPaySDK.CustomerAddres.CodingKeys : Swift.RawRepresentable {}
